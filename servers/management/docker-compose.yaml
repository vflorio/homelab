###########################################################################
# HomeLab Management Server
# Monitoring, Management, Database, Remote Access
# IP: 192.168.1.191 (management.intranet.vflorio.com)
###########################################################################

networks:
  management:
    name: management
    driver: bridge
    ipam:
      driver: default
      config:
      - subnet: ${DOCKER_SUBNET:?err}
        gateway: ${DOCKER_GATEWAY:?err}

###########################################################################
# CORE SERVICES
###########################################################################

services:

###########################################################################
# Consul - Service Discovery Agent
###########################################################################
  consul:
    image: hashicorp/consul:1.21
    container_name: consul-agent
    restart: unless-stopped
    networks:
      - management
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - ${FOLDER_FOR_DATA:?err}/consul/data:/consul/data
    command: >
      consul agent
      -retry-join=192.168.1.190
      -bind=0.0.0.0
      -client=0.0.0.0
      -data-dir=/consul/data
      -datacenter=homelab
      -log-level=INFO
      -node=management-server
    environment:
      - TZ=${TIMEZONE:?err}
      - CONSUL_BIND_INTERFACE=eth0

###########################################################################
# PostgreSQL - Shared Database
###########################################################################
  postgresql:
    image: docker.io/library/postgres:latest
    container_name: postgresql
    restart: unless-stopped
    networks:
      - management
    # user: ${PUID:?err}:${PGID:?err}  # FIXME
    ports:
      - ${POSTGRESQL_PORT:?err}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      #- ${FOLDER_FOR_DATA:?err}/postgresql:/var/lib/postgresql/data # FIXME
      - postgresql-data:/var/lib/postgresql/data
    environment:
      - TZ=${TIMEZONE:?err}
      - POSTGRES_DB=${AUTHENTIK_DATABASE:?err}
      - POSTGRES_USER=${POSTGRESQL_USERNAME:?err}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD:?err}

###########################################################################
# Guacamole / Guacd - Remote Desktop Gateway
###########################################################################
  guacamole:
    image: guacamole/guacamole
    container_name: guacamole
    restart: unless-stopped
    user: ${PUID:?err}:${PGID:?err}
    depends_on:
      postgresql:
        condition: service_healthy
        restart: true
    networks:
      - management
    ports:
      - ${WEBUI_PORT_GUACAMOLE:?err}:8080
    environment:
      - TZ=${TIMEZONE:?err}
      - WEBAPP_CONTEXT=ROOT
      - GUACD_HOSTNAME=guacd
      - POSTGRESQL_HOSTNAME=postgresql
      - POSTGRESQL_PORT=${POSTGRESQL_PORT:?err}
      - POSTGRESQL_DATABASE=${GUACAMOLE_DATABASE:?err}
      - POSTGRESQL_USER=${POSTGRESQL_USERNAME:?err}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD:?err}
    labels:
      # Consul service discovery
      - consul.service.name=guacamole
      - consul.service.tags=remote-access,rdp,vnc,ssh,management-server
      - consul.service.port=8080
      - consul.service.address=192.168.1.191
      - consul.service.check.http=http://192.168.1.191:8080/
      - consul.service.check.interval=10s
      # Traefik configuration
      - traefik.enable=true
      # Routers
      - traefik.http.routers.guacamole.service=guacamole
      - traefik.http.routers.guacamole.rule=Host(`guacamole.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`guacamole.${INTRANET_DOMAIN:?err}`)  
      - traefik.http.routers.guacamole.entrypoints=websecure
      - traefik.http.routers.guacamole.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      # Services
      - traefik.http.services.guacamole.loadbalancer.server.scheme=http
      - traefik.http.services.guacamole.loadbalancer.server.port=8080

  guacd:
    image: guacamole/guacd
    container_name: guacd
    restart: unless-stopped
    user: ${PUID:?err}:${PGID:?err}
    depends_on:
      postgresql:
        condition: service_healthy
        restart: true
    networks:
      - management
    ports:
      - ${GUACD_PORT:?err}:4822
    environment:
      - TZ=${TIMEZONE:?err}
      - POSTGRESQL_HOSTNAME=postgresql
      - POSTGRESQL_PORT=${POSTGRESQL_PORT:?err}
      - POSTGRESQL_DATABASE=${GUACAMOLE_DATABASE:?err}
      - POSTGRESQL_USER=${POSTGRESQL_USERNAME:?err}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD:?err}

###########################################################################
# Valkey - High Performance Data Structure Server (Redis alternative)
###########################################################################
  valkey:
    image: valkey/valkey:alpine
    container_name: valkey
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    networks:
      - management
    user: ${PUID:?err}:${PGID:?err}
    ports:
      - ${VALKEY_PORT:?err}:6379
    healthcheck:
      test: ["CMD-SHELL", "valkey-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${FOLDER_FOR_DATA:?err}/valkey:/data

###########################################################################
# Prometheus - Metrics Collection & Monitoring
###########################################################################
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    user: ${PUID:?err}:${PGID:?err}
    networks:
      - management
    ports:
      - 127.0.0.1:${WEBUI_PORT_PROMETHEUS:?err}:9090
    volumes:
      - ${FOLDER_FOR_DATA:?err}/prometheus:/prometheus
    environment:
      - TZ=${TIMEZONE:?err}
    labels:
      # Consul service discovery
      - consul.service.name=prometheus
      - consul.service.tags=remote-access,rdp,vnc,ssh,management-server
      - consul.service.port=9090
      - consul.service.address=192.168.1.191
      - consul.service.check.http=http://192.168.1.191:9090/
      - consul.service.check.interval=10s
      # Traefik configuration
      - traefik.enable=true
      # Routers
      - traefik.http.routers.prometheus.service=prometheus
      - traefik.http.routers.prometheus.rule=Host(`prometheus.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`prometheus.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.prometheus.entrypoints=websecure
      - traefik.http.routers.prometheus.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      # Services
      - traefik.http.services.prometheus.loadbalancer.server.scheme=http
      - traefik.http.services.prometheus.loadbalancer.server.port=9090

###########################################################################
# Grafana - Visual Monitoring Dashboard
###########################################################################
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    user: ${PUID:?err}:${PGID:?err}
    networks:
      - management
    ports:
      - ${WEBUI_PORT_GRAFANA:?err}:3000
    volumes:
      - /var/log:/var/dockerhost:ro
      - ${FOLDER_FOR_DATA:?err}/grafana:/var/lib/grafana
    environment:
      - TZ=${TIMEZONE:?err}
    labels:
      # Consul service discovery
      - consul.service.name=grafana
      - consul.service.tags=remote-access,rdp,vnc,ssh,management-server
      - consul.service.port=3000
      - consul.service.address=192.168.1.191
      - consul.service.check.http=http://192.168.1.191:3000/
      - consul.service.check.interval=10s
      # Traefik configuration
      - traefik.enable=true
      # Routers
      - traefik.http.routers.grafana.service=grafana
      - traefik.http.routers.grafana.rule=Host(`grafana.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`grafana.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      # Services
      - traefik.http.services.grafana.loadbalancer.server.scheme=http 
      - traefik.http.services.grafana.loadbalancer.server.port=3000

###########################################################################
# Portainer - Container Management
###########################################################################
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${FOLDER_FOR_DATA:?err}/portainer:/data
    ports:
      - ${WEBUI_PORT_PORTAINER:?err}:9000
    networks:
      - management
    labels:
      # Consul service discovery
      - consul.service.name=portainer
      - consul.service.tags=remote-access,rdp,vnc,ssh,management-server
      - consul.service.port=9000
      - consul.service.address=192.168.1.191
      - consul.service.check.http=http://192.168.1.191:9000/
      - consul.service.check.interval=10s
      # Traefik configuration
      - traefik.enable=true
      # Routers
      - traefik.http.routers.portainer.service=portainer
      - traefik.http.routers.portainer.rule=Host(`portainer.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`portainer.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      # Services
      - traefik.http.services.portainer.loadbalancer.server.scheme=http
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: unless-stopped
    ports:
      - ${WEBUI_PORT_HOMEPAGE:?err}:3000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${FOLDER_FOR_DATA:?err}/homepage:/app/config
    environment:
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
      - HOMEPAGE_ALLOWED_HOSTS=homepage.${CLOUDFLARE_DNS_ZONE:?err},homepage.${INTRANET_DOMAIN:?err},${INTRANET_DOMAIN:?err}:${WEBUI_PORT_HOMEPAGE:?err}
    networks:
      - management
    labels:
      # Consul service discovery
      - consul.service.name=homepage
      - consul.service.tags=remote-access,rdp,vnc,ssh,management-server
      - consul.service.port=3000
      - consul.service.address=192.168.1.191
      - consul.service.check.http=http://192.168.1.191:3000/
      - consul.service.check.interval=10s
      # Traefik configuration
      - traefik.enable=true
      # Routers
      - traefik.http.routers.homepage.service=homepage
      - traefik.http.routers.homepage.rule=Host(`homepage.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`homepage.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.homepage.entrypoints=websecure
      - traefik.http.routers.homepage.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      # Services
      - traefik.http.services.homepage.loadbalancer.server.scheme=http
      - traefik.http.services.homepage.loadbalancer.server.port=3000

###########################################################################
# Semaphore - Ansible Web UI / Frontend
###########################################################################
  semaphore:
    image: semaphoreui/semaphore:latest
    container_name: semaphore
    restart: unless-stopped
    user: ${PUID:?err}:${PGID:?err}
    depends_on:
      postgresql:
        condition: service_healthy
        restart: true
    networks:
      - management
    ports:
      - ${WEBUI_PORT_SEMAPHORE:?err}:3000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/ping"]
      start_period: 30s
      interval: 30s
      retries: 5
      timeout: 10s
    volumes:
      - ${FOLDER_FOR_DATA:?err}/semaphore/config:/etc/semaphore:rw
      - ${FOLDER_FOR_DATA:?err}/semaphore/tmp:/tmp/semaphore:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount ansible playbooks
      - ${FOLDER_FOR_DATA:?err}/ansible:/ansible:ro
      # SSH keys for remote access
      - ${FOLDER_FOR_DATA:?err}/ssh:/root/.ssh:ro
    environment:
      - TZ=${TIMEZONE:?err}
      # Database configuration (PostgreSQL)
      - SEMAPHORE_DB_DIALECT=postgres
      - SEMAPHORE_DB_HOST=postgresql
      - SEMAPHORE_DB_PORT=${POSTGRESQL_PORT:?err}
      - SEMAPHORE_DB_NAME=${SEMAPHORE_DATABASE:?err}
      - SEMAPHORE_DB_USER=${POSTGRESQL_USERNAME:?err}
      - SEMAPHORE_DB_PASS=${POSTGRESQL_PASSWORD:?err}
      # Admin user
      - SEMAPHORE_ADMIN_NAME=${SEMAPHORE_ADMIN_USER:?err}
      - SEMAPHORE_ADMIN_EMAIL=${SEMAPHORE_ADMIN_EMAIL:?err}
      - SEMAPHORE_ADMIN_PASSWORD=${SEMAPHORE_ADMIN_PASSWORD:?err}
      - SEMAPHORE_ADMIN=${SEMAPHORE_ADMIN_USER:?err}
      # Access configuration
      - SEMAPHORE_ACCESS_KEY_ENCRYPTION=${SEMAPHORE_ACCESS_KEY:?err}
      # Web configuration
      - SEMAPHORE_WEB_HOST=0.0.0.0
      - SEMAPHORE_WEB_PORT=3000
      # Features
      - SEMAPHORE_LDAP_ENABLE=false
      - SEMAPHORE_DEMO_MODE=false
    labels:
      # Consul service discovery
      - consul.service.name=semaphore
      - consul.service.tags=ansible,automation,cicd,management-server
      - consul.service.port=3000
      - consul.service.address=192.168.1.191
      - consul.service.check.http=http://192.168.1.191:${WEBUI_PORT_SEMAPHORE:?err}/api/ping
      - consul.service.check.interval=10s
      # Traefik configuration
      - traefik.enable=true
      # Routers
      - traefik.http.routers.semaphore.service=semaphore
      - traefik.http.routers.semaphore.rule=Host(`semaphore.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`semaphore.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.semaphore.entrypoints=websecure
      - traefik.http.routers.semaphore.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      # Services  
      - traefik.http.services.semaphore.loadbalancer.server.scheme=http
      - traefik.http.services.semaphore.loadbalancer.server.port=3000

###########################################################################
# VOLUMES
###########################################################################

volumes:
  postgresql-data:
    driver: local