###########################################################################
# HomeLab Gateway/Security Server
# Sicurezza, TLS, Accesso Remoto, Autenticazione
# IP: 192.168.1.190 (gateway.intranet.vflorio.com)
###########################################################################

networks:
  gateway:
    name: gateway
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${DOCKER_SUBNET:?err}
          gateway: ${DOCKER_GATEWAY:?err}

volumes:
  authentik-postgres-data:
    driver: local

services:
  ###########################################################################
  # Traefik - Reverse Proxy & TLS Management
  ###########################################################################
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    networks:
      - gateway
    #user: root
    environment:
      - TZ=${TIMEZONE:?err}
      - CF_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN:?err}
    ports:
      - ${PORT_REVERSE_PROXY_HTTP:?err}:80
      - ${PORT_REVERSE_PROXY_HTTPS:?err}:443
      - ${PORT_TRAEFIK:?err}:8080
      - ${PORT_TRAEFIK_METRICS:?err}:8082
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PATH_DATA:?err}/logs/traefik:/var/log
      - ${PATH_DATA:?err}/traefik/letsencrypt/:/letsencrypt/
      - ./traefik:/etc/traefik
    labels:
      - traefik.enable=true
      # Routers
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.rule=Host(`traefik.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`traefik.${INTRANET_DOMAIN:?err}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      # Services
      - traefik.http.services.traefik.loadbalancer.server.scheme=http
      - traefik.http.services.traefik.loadbalancer.server.port=8080

  ###########################################################################
  # Authentik - Authentication & SSO
  ###########################################################################
  authentik:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_VERSION:?err}
    container_name: authentik
    restart: unless-stopped
    networks:
      - gateway
#    user: ${PUID:?err}:${PGID:?err}
    command: server
    environment:
      - TZ=${TIMEZONE:?err}
      - AUTHENTIK_LOG_LEVEL=info # info, warning, error, debug and trace
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY:?err}
      - AUTHENTIK_REDIS__HOST=valkey
      - AUTHENTIK_POSTGRESQL__HOST=authentik-postgresql
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_DATABASE:?err}
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER:?err}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD:?err}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING__ENABLED:?err}
      - AUTHENTIK_EMAIL__HOST=${EMAIL_SERVER_HOST}
      - AUTHENTIK_EMAIL__PORT=${EMAIL_SERVER_PORT}
      - AUTHENTIK_EMAIL__USERNAME=${EMAIL_ADDRESS}
      - AUTHENTIK_EMAIL__PASSWORD=${EMAIL_PASSWORD}
      - AUTHENTIK_EMAIL__USE_TLS=${EMAIL_TLS}
      - AUTHENTIK_EMAIL__USE_SSL=${EMAIL_SSL}
      - AUTHENTIK_EMAIL__FROM=${EMAIL_SENDER}
      - AUTHENTIK_EMAIL__TIMEOUT=10
    volumes:
      - ${PATH_DATA:?err}/authentik/media:/media
      - ${PATH_DATA:?err}/authentik/templates:/templates
    ports:
      - ${PORT_AUTHENTIK:?err}:9000
    depends_on:
      authentik-postgresql:
        condition: service_healthy
        restart: true
      valkey:
        condition: service_healthy
        restart: true
    labels:
      - traefik.enable=true
      # Routers
      - traefik.http.routers.authentik.service=authentik
      - traefik.http.routers.authentik.rule=Host(`auth.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`auth.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.authentik.entrypoints=websecure
      - traefik.http.routers.authentik.middlewares=security-headers@file,traefik-bouncer@file
      # Do not add authentik-forwardauth@file to middlewares, otherwise other applications can't authenticate
      # Services
      - traefik.http.services.authentik.loadbalancer.server.scheme=http
      - traefik.http.services.authentik.loadbalancer.server.port=9000

  authentic-worker:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_VERSION:?err}
    container_name: authentik-worker
    restart: unless-stopped
    networks:
      - gateway
#    user: ${PUID:?err}:${PGID:?err}
    command: worker
    environment:
      - TZ=${TIMEZONE:?err}
      - AUTHENTIK_SECRET_KEY=${AUTHENTIK_SECRET_KEY:?err}
      - AUTHENTIK_REDIS__HOST=valkey
      - AUTHENTIK_POSTGRESQL__HOST=authentik-postgresql
      - AUTHENTIK_POSTGRESQL__NAME=${AUTHENTIK_DATABASE:?err}
      - AUTHENTIK_POSTGRESQL__USER=${POSTGRES_USER:?err}
      - AUTHENTIK_POSTGRESQL__PASSWORD=${POSTGRES_PASSWORD:?err}
      - AUTHENTIK_ERROR_REPORTING__ENABLED=${AUTHENTIK_ERROR_REPORTING__ENABLED:?err}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PATH_DATA:?err}/authentik/certs:/certs
      - ${PATH_DATA:?err}/authentik/media:/media
      - ${PATH_DATA:?err}/authentik/templates:/templates
    depends_on:
      authentik-postgresql:
        condition: service_healthy
        restart: true
      valkey:
        condition: service_healthy
        restart: true

  ###########################################################################
  # CrowdSec - Security & Intrusion Detection
  ###########################################################################
  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    restart: always
    networks:
      - gateway
#    user: ${PUID:?err}:${PGID:?err}
    environment:
      - TZ=${TIMEZONE:?err}
    ports:
      - 127.0.0.1:${PORT_CROWDSEC:?err}:8080
      - 6060:6060 # Provides Metrics for Prometheus
      - 7422:7422 # Provides WAF AppSec
    depends_on:
      - traefik
    volumes:
      - ${PATH_DATA:?err}/crowdsec/data:/var/lib/crowdsec/data/
      - ${PATH_DATA:?err}/crowdsec/logs:/logs
      - ./crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml

  ###########################################################################
  # Headscale - Self-hosted VPN Control Server
  ###########################################################################
  headscale:
    image: headscale/headscale:latest
    container_name: headscale
    restart: unless-stopped
    networks:
      - gateway
    command: serve
    ports:
      - ${PORT_HEADSCALE_CONNECT:?err}:8080
      - ${PORT_HEADSCALE_METRICS:?err}:9090
    volumes:
      - ./headscale:/etc/headscale
      - ${PATH_DATA:?err}/headscale:/var/lib/headscale
    environment:
      - TZ=${TIMEZONE:?err}
    labels:
      - traefik.enable=true
      # Routers
      - traefik.http.routers.headscale.service=headscale
      - traefik.http.routers.headscale.rule=Host(`headscale.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`headscale.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.headscale.entrypoints=websecure
      - traefik.http.routers.headscale.middlewares=security-headers@file,traefik-bouncer@file
      # Do not add authentik-forwardauth@file to middlewares, otherwise Tailscale clients can't authenticate and connect
      # Services
      - traefik.http.services.headscale.loadbalancer.server.scheme=http
      - traefik.http.services.headscale.loadbalancer.server.port=8080

  ###########################################################################
  # Headplane - Headscale Web UI
  ###########################################################################
  headplane:
    image: ghcr.io/tale/headplane:latest
    container_name: headplane
    restart: unless-stopped
    networks:
      - gateway
    ports:
      - ${PORT_HEADPLANE:?err}:3000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PATH_DATA:?err}/headplane/data:/var/lib/headplane
      - ./headscale:/etc/headscale
      - ./headplane:/etc/headplane
    environment:
      - TZ=${TIMEZONE:?err}
    labels:
      - traefik.enable=true
      # Routers
      - traefik.http.routers.headplane.service=headplane
      - traefik.http.routers.headplane.rule=(Host(`headplane.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`headplane.${INTRANET_DOMAIN:?err}`)) && PathPrefix(`/admin/`)
      - traefik.http.routers.headplane.entrypoints=websecure
      - traefik.http.routers.headplane.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      # Services
      - traefik.http.services.headplane.loadbalancer.server.scheme=http
      - traefik.http.services.headplane.loadbalancer.server.port=3000

  ###########################################################################
  # DDNS Updater - Dynamic DNS
  ###########################################################################
  ddns-updater:
    image: qmcgaw/ddns-updater:latest
    container_name: ddns-updater
    restart: always
#    user: ${PUID:?err}:${PGID:?err}
    volumes:
      - ${PATH_DATA:?err}/ddns-updater:/updater/data
    ports:
      - ${PORT_DDNS_UPDATER:?err}:${PORT_DDNS_UPDATER:?err}/tcp
    environment:
      - UMASK=${UMASK:?err}
      - TZ=${TIMEZONE:?err}
      - CONFIG=
      - PERIOD=5m
      - UPDATE_COOLDOWN_PERIOD=5m
      - PUBLICIP_FETCHERS=all
      - PUBLICIP_HTTP_PROVIDERS=all
      - PUBLICIPV4_HTTP_PROVIDERS=all
      - PUBLICIPV6_HTTP_PROVIDERS=all
      - PUBLICIP_DNS_PROVIDERS=all
      - PUBLICIP_DNS_TIMEOUT=3s
      - HTTP_TIMEOUT=10s
      # Web UI
      - LISTENING_ADDRESS=:${PORT_DDNS_UPDATER:?err}
      - ROOT_URL=/
      # Backup
      - BACKUP_PERIOD=0 # 0 to disable
      - BACKUP_DIRECTORY=/updater/data
      # Other
      - LOG_LEVEL=info
      - LOG_CALLER=hidden
      - SHOUTRRR_ADDRESSES=
    networks:
      - gateway
    labels:
      - traefik.enable=true
      # Routers
      - traefik.http.routers.ddns-updater.service=ddns-updater
      - traefik.http.routers.ddns-updater.rule=Host(`ddns-updater.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`ddns-updater.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.ddns-updater.entrypoints=websecure
      - traefik.http.routers.ddns-updater.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      # Services
      - traefik.http.services.ddns-updater.loadbalancer.server.scheme=http
      - traefik.http.services.ddns-updater.loadbalancer.server.port=${PORT_DDNS_UPDATER:?err}

  ###########################################################################
  # Portainer - Docker Management
  ###########################################################################
  portainer-agent:
    container_name: portainer-agent
    image: "portainer/agent:latest"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    restart: unless-stopped
    ports:
      - "${PORT_PORTAINER_AGENT:?err}:9001"
    environment:
      - AGENT_CLUSTER_ADDR="192.168.1.191"
    labels:
      - traefik.enable=true
      # Routers
      - traefik.http.routers.portainer-agent.service=portainer-agent
      - traefik.http.routers.portainer-agent.entrypoints=websecure
      - traefik.http.routers.portainer-agent.rule=Host(`portainer-agent-gateway.${CLOUDFLARE_DNS_ZONE:?err}`) || Host(`portainer-agent-gateway.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.portainer-agent.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      # Services
      - traefik.http.services.portainer-agent.loadbalancer.server.scheme=http
      - traefik.http.services.portainer-agent.loadbalancer.server.port=9001
    networks:
      - gateway

  ###########################################################################
  # PostgreSQL - Shared Database
  ###########################################################################
  authentik-postgresql:
    image: docker.io/library/postgres:latest
    container_name: authentik-postgresql
    restart: unless-stopped
    networks:
      - gateway
#    user: ${PUID:?err}:${PGID:?err}
    ports:
      - ${PORT_POSTGRES:?err}:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${AUTHENTIK_DATABASE}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - authentik-postgres-data:/var/lib/postgresql/data
    environment:
      - TZ=${TIMEZONE:?err}
      - POSTGRES_DB=${AUTHENTIK_DATABASE:?err}
      - POSTGRES_USER=${POSTGRES_USER:?err}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?err}

  ###########################################################################
  # Valkey - Redis Cache
  ###########################################################################
  valkey:
    image: valkey/valkey:alpine
    container_name: valkey
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    networks:
      - gateway
#    user: ${PUID:?err}:${PGID:?err}
    ports:
      - ${PORT_VALKEY:?err}:6379
    healthcheck:
      test: ["CMD-SHELL", "valkey-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ${PATH_DATA:?err}/valkey:/data
