###########################################################################
# HomeLab Development Server
# IP: 192.168.1.193 (dev.intranet.vflorio.com)
###########################################################################

networks:
  dev:
    name: dev
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${DOCKER_SUBNET:?err}
          gateway: ${DOCKER_GATEWAY:?err}

volumes:
  postgresql-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PATH_DATA:?err}/postgres/data

services:
  ###########################################################################
  # Portainer - Docker Management
  ###########################################################################
  portainer-agent:
    container_name: portainer-agent
    image: "portainer/agent:latest"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    restart: unless-stopped
    ports:
      - "${PORT_PORTAINER_AGENT:?err}:9001"
    environment:
      - AGENT_CLUSTER_ADDR="192.168.1.191"
    networks:
      - dev

  ###########################################################################
  # Traefik-KOP - Service Discovery Agent
  ###########################################################################
  traefik-kop:
    image: "ghcr.io/jittering/traefik-kop:latest"
    container_name: traefik-kop
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - "REDIS_ADDR=${INTRANET_GATEWAY_IP:?err}:${PORT_VALKEY:?err}"
      - "REDIS_DB=${VALKEY_TRAEFIK_KOP:?err}"
      - "BIND_IP=${LOCAL_DOCKER_IP:?err}"
    networks:
      - dev

  ###########################################################################
  # Coder - Development Platform
  ###########################################################################
  coder:
    image: "ghcr.io/coder/coder:latest"
    container_name: coder
    restart: unless-stopped
    ports:
      - "${PORT_CODER:?err}:7080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PATH_DATA:?err}/coder/config:/home/coder/.config
      - ${PATH_DATA:?err}/coder/workspaces:/workspaces
      - ./templates:/templates
    group_add:
      - "${DOCKER_GROUP:-988}"
    user: "0:0"
    environment:
      - CODER_HTTP_ADDRESS=0.0.0.0:7080
      - CODER_ACCESS_URL=https://coder.${CF_DNS_ZONE:?err}
      - CODER_WILDCARD_ACCESS_URL=*.coder.${INTRANET_DOMAIN:?err}
      - CODER_PG_CONNECTION_URL=postgres://${POSTGRES_USER:?err}:${POSTGRES_PASSWORD:?err}@postgres:5432/${POSTGRES_DB:?err}?sslmode=disable
      - TZ=${TIMEZONE:?err}
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.coder.service=coder
      - traefik.http.routers.coder.entrypoints=websecure
      - traefik.http.routers.coder.rule=Host(`coder.${CF_DNS_ZONE:?err}`) || Host(`coder.${INTRANET_DOMAIN:?err}`) || HostRegexp(`{subdomain:[a-zA-Z0-9-]+}.coder.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.coder.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      - traefik.http.services.coder.loadbalancer.server.scheme=http
      - traefik.http.services.coder.loadbalancer.server.port=${PORT_CODER:?err}
    networks:
      - dev

  ###########################################################################
  # PostgreSQL - Database for Coder
  ###########################################################################
  postgres:
    image: "postgres:15-alpine"
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:?err}
      - POSTGRES_USER=${POSTGRES_USER:?err}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?err}
      - TZ=${TIMEZONE:?err}
    networks:
      - dev

  ###########################################################################
  # Gitea - Git Repository Server
  ###########################################################################
  gitea:
    image: "gitea/gitea:latest"
    container_name: gitea
    restart: unless-stopped
    ports:
      - "${PORT_GITEA:?err}:3000"
      - "${PORT_GITEA_SSH:?err}:22"
    volumes:
      - ${PATH_DATA:?err}/gitea:/data
    environment:
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=postgres:5432
      - GITEA__database__NAME=${POSTGRES_DB:?err}
      - GITEA__database__USER=${POSTGRES_USER:?err}
      - GITEA__database__PASSWD=${POSTGRES_PASSWORD:?err}
      - GITEA__server__DOMAIN=git.${CF_DNS_ZONE:?err}
      - GITEA__server__SSH_DOMAIN=git.${CF_DNS_ZONE:?err}
      - GITEA__server__ROOT_URL=https://git.${CF_DNS_ZONE:?err}/
    depends_on:
      - postgres
    labels:
      - traefik.enable=true
      - traefik.http.routers.gitea.service=gitea
      - traefik.http.routers.gitea.entrypoints=websecure
      - traefik.http.routers.gitea.rule=Host(`git.${CF_DNS_ZONE:?err}`) || Host(`git.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.gitea.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      - traefik.http.services.gitea.loadbalancer.server.scheme=http
      - traefik.http.services.gitea.loadbalancer.server.port=${PORT_GITEA:?err}
    networks:
      - dev

  ###########################################################################
  # Container Registry - Docker Registry
  ###########################################################################
  registry:
    image: "registry:2"
    container_name: container-registry
    restart: unless-stopped
    ports:
      - "${PORT_REGISTRY:?err}:5000"
    volumes:
      - ${PATH_DATA:?err}/container-registry:/var/lib/registry/docker
    environment:
      - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm
      - REGISTRY_AUTH_HTPASSWD_PATH=/var/lib/registry/auth/htpasswd
    labels:
      - traefik.enable=true
      - traefik.http.routers.registry.service=registry
      - traefik.http.routers.registry.entrypoints=websecure
      - traefik.http.routers.registry.rule=Host(`container-registry.${CF_DNS_ZONE:?err}`) || Host(`container-registry.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.registry.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      - traefik.http.services.registry.loadbalancer.server.scheme=http
      - traefik.http.services.registry.loadbalancer.server.port=${PORT_REGISTRY:?err}
    networks:
      - dev

  ###########################################################################
  # Verdaccio - NPM Registry
  ###########################################################################
  verdaccio:
    image: "verdaccio/verdaccio:latest"
    container_name: verdaccio
    restart: unless-stopped
    ports:
      - "${PORT_VERDACCIO:?err}:${PORT_VERDACCIO:?err}"
    volumes:
      - ${PATH_DATA:?err}/verdaccio:/verdaccio
      - "./verdaccio:/verdaccio/conf"
    environment:
      - VERDACCIO_USER_NAME=${VERDACCIO_USER:?err}
      - VERDACCIO_USER_PWD=${VERDACCIO_PASSWORD:?err}
      - VERDACCIO_PORT=${PORT_VERDACCIO:?err}
    labels:
      - traefik.enable=true
      - traefik.http.routers.verdaccio.service=verdaccio
      - traefik.http.routers.verdaccio.entrypoints=websecure
      - traefik.http.routers.verdaccio.rule=Host(`npm.${CF_DNS_ZONE:?err}`) || Host(`npm.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.verdaccio.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      - traefik.http.services.verdaccio.loadbalancer.server.scheme=http
      - traefik.http.services.verdaccio.loadbalancer.server.port=${PORT_VERDACCIO:?err}
    networks:
      - dev

  ###########################################################################
  # Excalidraw - Quick Sketching
  ###########################################################################
  excalidraw:
    image: "excalidraw/excalidraw:latest"
    container_name: excalidraw
    restart: unless-stopped
    ports:
      - "${PORT_EXCALIDRAW:?err}:80"
    labels:
      - traefik.enable=true
      - traefik.http.routers.excalidraw.service=excalidraw
      - traefik.http.routers.excalidraw.entrypoints=websecure
      - traefik.http.routers.excalidraw.rule=Host(`excalidraw.${CF_DNS_ZONE:?err}`) || Host(`excalidraw.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.excalidraw.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      - traefik.http.services.excalidraw.loadbalancer.server.scheme=http
      - traefik.http.services.excalidraw.loadbalancer.server.port=${PORT_EXCALIDRAW}
    networks:
      - dev

  ###########################################################################
  # Drawio - Detailed Diagrams
  ###########################################################################
  drawio:
    image: "jgraph/drawio:latest"
    container_name: drawio
    restart: unless-stopped
    ports:
      - "${PORT_DRAWIO:?err}:8080"
    labels:
      - traefik.enable=true
      - traefik.http.routers.drawio.service=drawio
      - traefik.http.routers.drawio.entrypoints=websecure
      - traefik.http.routers.drawio.rule=Host(`drawio.${CF_DNS_ZONE:?err}`) || Host(`drawio.${INTRANET_DOMAIN:?err}`)
      - traefik.http.routers.drawio.middlewares=authentik-forwardauth@file,security-headers@file,traefik-bouncer@file
      - traefik.http.services.drawio.loadbalancer.server.scheme=http
      - traefik.http.services.drawio.loadbalancer.server.port=${PORT_DRAWIO}
    networks:
      - dev
